---
import { Image } from "astro:assets";

import Lightbox from "@julian_cataldo/astro-lightbox";

import styles from "./galleryImageGrid.module.scss";

const { images } = Astro.props;
---
<style>
    .imageGrid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        justify-items: center;
        padding-left: 2rem;
        padding-right: 2rem;
        gap: 1rem;
        margin: 0 auto;
  }

    .thumbnail {
        grid-column: span 1;
    }

    .landscape {
        grid-column: span 2;
    }

    /* at lower than 600px, the grid will be 1 column */
    @media (max-width: 600px) {
        .imageGrid {
            grid-template-columns: 100%;
        }
        .landscape {
            grid-column: span 1; 
            margin: 0 auto;
        }
    }
    

    .thumbnail {
        transition: all 0.354s ease-in-out;
        box-shadow: rgba(0, 0, 0, 0.25) 0px 0.0625em 0.0625em, rgba(0, 0, 0, 0.25) 0px 0.125em 0.5em, rgba(255, 255, 255, 0.1) 0px 0px 0px 1px inset;
        opacity: 100%;
        cursor: pointer;
        border: 4px solid white;

        img {
        width: 100%;
        height: 100%;

        object-fit: cover;
        margin: 0 auto;
        display: block;
        }
    }
    
    
    .thumbnail:hover {
        opacity: 50%;
        z-index: 200;
    }
    
    :global(.lightbox-arrow {
        position: fixed;
        top: 50%;
        transform: translateY(-50%);
        background: rgba(255, 255, 255, 0.8);
        border: none;
        padding: 1rem;
        font-size: 2rem;
        cursor: pointer;
        z-index: 100221;
        border-radius: 50%;
    })

    :global(.prev { left: 2rem; })
    :global(.next { right: 2rem; })

    :global(.lightbox-arrow:hover) {
        background: rgba(255, 255, 255, 1);
    }

    :global(.lightbox-clone) {
        position: fixed !important;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 100220;
        transition: opacity 0.1s ease-out !important;
        background: rgba(0, 0, 0, 0.9);
    }

    :global(.fade-out) {
        opacity: 0 !important;
    }

</style>
<script>
    // Get the image element and check if it's landscape

        function checkImageOrientation() {
            const imageContainers = document.querySelectorAll("[id$='-thumbnail']");
            imageContainers.forEach((imageContainer) => {
                const image = imageContainer.querySelector("img");
                const imageWidth = image.naturalWidth;
                const imageHeight = image.naturalHeight;
                const imageRatio = imageWidth / imageHeight;
                if (imageWidth > imageHeight) {
                    imageContainer.classList.add("landscape");
                }
                if (imageRatio > 2) {
                    imageContainer.classList.add("superwide");
                }
            });

        }

         
    function setupLightboxNavigation() {
        const thumbnails = Array.from(document.querySelectorAll('.thumbnail'));
        let currentIndex = 0;

        function showNext() {
            currentIndex = (currentIndex + 1) % thumbnails.length;
            const clone = createTransitionClone();
            
            document.querySelector('.app-lightbox-close')?.click();
            
            if (clone) {
                requestAnimationFrame(() => {
                    clone.classList.add('fade-out');
                    setTimeout(() => {
                        clone.remove();
                    }, 300);
                });
            }
            
            setTimeout(() => thumbnails[currentIndex].click(), 1);
        }

        function showPrevious() {
            currentIndex = (currentIndex - 1 + thumbnails.length) % thumbnails.length;
            const clone = createTransitionClone();
            
            document.querySelector('.app-lightbox-close')?.click();
            
            if (clone) {
                requestAnimationFrame(() => {
                    clone.classList.add('fade-out');
                    setTimeout(() => {
                        clone.remove();
                    }, 300);
                });
            }
            
            setTimeout(() => thumbnails[currentIndex].click(), 1);
        }

        // Move keyboard navigation here, outside of setupArrows
        document.addEventListener('keydown', (e) => {
            if (!document.querySelector('.app-lightbox.is-active')) return;
            if (e.key === 'ArrowRight') showNext();
            if (e.key === 'ArrowLeft') showPrevious();
        });

        const observer = new MutationObserver((mutations, obs) => {
            const lightbox = document.querySelector('.app-lightbox.is-active');
            if (lightbox) {
                setupArrows(lightbox);
                obs.disconnect();
            }
        });

        observer.observe(document.body, {
            childList: true,
            subtree: true
        });

        function createTransitionClone() {
            const current = document.querySelector('.app-lightbox.is-active');
            if (!current) return null;
            
            const clone = current.cloneNode(true) as HTMLElement;
            clone.classList.add('lightbox-clone');
            // Remove any interactive elements from clone
            clone.querySelectorAll('button').forEach(btn => btn.remove());
            document.body.appendChild(clone);
            return clone;
        }

        function setupArrows(lightbox) {
            // Track current index
            thumbnails.forEach((thumb, index) => {
                thumb.addEventListener('click', () => {
                    currentIndex = index;
                });
            });

            // Add arrow buttons
            const arrows = `
                <button class="lightbox-arrow prev">←</button>
                <button class="lightbox-arrow next">→</button>
            `;
            lightbox.insertAdjacentHTML('beforeend', arrows);

            // Add click handlers
            document.querySelector('.next')?.addEventListener('click', showNext);
            document.querySelector('.prev')?.addEventListener('click', showPrevious);
        }
    }

    window.addEventListener("load", () => {
        checkImageOrientation();
        setupLightboxNavigation();
    });
        
    </script>
<>
    <Lightbox />
    <div class="imageGrid">
        {
            Object.entries(images).map(([imagePath, image]) => {
                return (
                    <div
                        class="thumbnail"
                        data-lightbox="true"
                        id=`${imagePath}-thumbnail`
                    >
                        <Image
                            src={image()}
                            alt="test"
                            widths={[300, 600, 900, 1200, 1500]}
                            sizes={`(max-width: 400px) 300px, (max-width: 800px) 900px, 1500px`}
                        />
                    </div>
                );
            })
        }
    </div>
</>
