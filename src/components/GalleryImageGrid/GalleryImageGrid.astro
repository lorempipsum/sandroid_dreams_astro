---
import { Image } from "astro:assets";
import Lightbox from "@julian_cataldo/astro-lightbox";
import styles from "./galleryImageGrid.module.scss";

const BATCH_SIZE = 20;
const { images } = Astro.props;

// Pre-sort all images and convert to array format for client-side use
const allImageData = Object.entries(images)
    .sort(
        ([filenameA], [filenameB]) =>
            getDateFromFilename(filenameB).getTime() -
            getDateFromFilename(filenameA).getTime(),
    )
    .map(([path, imageGetter]) => ({
        path,
        image: imageGetter(),
    }));

const totalBatches = Math.ceil(allImageData.length / BATCH_SIZE);

function getDateFromFilename(filename: string) {
    // Match YYYYMMDD-HH-MM-SS pattern
    const match = filename.match(/(\d{8})-(\d{2})-(\d{2})-(\d{2})/);
    if (!match) return new Date(0);

    const [_, date, hours, minutes, seconds] = match;
    const year = date.slice(0, 4);
    const month = date.slice(4, 6);
    const day = date.slice(6, 8);

    return new Date(`${year}-${month}-${day}T${hours}:${minutes}:${seconds}`);
}
---

<style>
    .imageGrid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        justify-items: center;
        padding-left: 2rem;
        padding-right: 2rem;
        gap: 1rem;
        margin: 0 auto;
    }

    .thumbnail {
        grid-column: span 1;
    }

    .landscape {
        grid-column: span 2;
    }

    .superwide {
        grid-column: 1 / -1;

        img {
            width: 95vw !important;
            height: auto;
        }
    }

    /* at lower than 600px, the grid will be 1 column */
    @media (max-width: 600px) {
        .imageGrid {
            grid-template-columns: 100%;
        }
        .landscape {
            grid-column: span 1;
            margin: 0 auto;
        }
    }

    .thumbnail {
        transition: all 0.354s ease-in-out;
        box-shadow:
            rgba(0, 0, 0, 0.25) 0px 0.0625em 0.0625em,
            rgba(0, 0, 0, 0.25) 0px 0.125em 0.5em,
            rgba(255, 255, 255, 0.1) 0px 0px 0px 1px inset;
        opacity: 100%;
        cursor: pointer;
        border: 4px solid white;

        img {
            width: 100%;
            height: 100%;

            object-fit: cover;
            margin: 0 auto;
            display: block;
        }
    }

    .thumbnail:hover {
        opacity: 50%;
        z-index: 200;
    }

    :global(.lightbox-arrow {
        position: fixed;
        top: 50%;
        transform: translateY(-50%);
        background: rgba(255, 255, 255, 0.8);
        border: none;
        padding: 1rem;
        font-size: 2rem;
        cursor: pointer;
        z-index: 100221;
        border-radius: 50%;
    })

    :global(.prev { left: 2rem; })
    :global(.next { right: 2rem; })

    :global(.lightbox-arrow:hover) {
        background: rgba(255, 255, 255, 1);
    }

    :global(.lightbox-clone) {
        position: fixed !important;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 100220;
        transition: opacity 0.2s ease-out !important;
    }

    :global(.fade-out) {
        opacity: 0 !important;
    }

    #loading-trigger {
        width: 100%;
        height: 10px;
        margin: 2rem 0;
    }

    .hidden-batch {
        display: none;
    }

    :global(.app-lightbox) {
        background: rgba(0, 0, 0, 0.9) !important;
    }

    :global(.app-lightbox img) {
        max-height: 90vh !important;
        width: auto !important;
        object-fit: contain;
    }

    :global(.app-lightbox) {
        cursor: default !important;
    }

    :global(.app-lightbox-close) {
        color: white !important;
        font-size: 2rem !important;
    }

    :global(.app-lightbox-nav) {
        position: fixed;
        top: 50%;
        transform: translateY(-50%);
        background: rgba(255, 255, 255, 0.8);
        border: none;
        padding: 1rem 1.5rem;
        font-size: 2rem;
        cursor: pointer;
        z-index: 100222;
        border-radius: 50%;
        color: black;
        transition: background-color 0.2s;
    }

    :global(.app-lightbox-nav:hover) {
        background: rgba(255, 255, 255, 1);
    }

    :global(.app-lightbox-prev) {
        left: 2rem;
    }

    :global(.app-lightbox-next) {
        right: 2rem;
    }
</style>

<script define:vars={{ allImageData, BATCH_SIZE, totalBatches }}>
    function checkImageOrientation(thumbnail) {
        const img = thumbnail.querySelector("img");

        function setOrientation() {
            const imageWidth = img.naturalWidth;
            const imageHeight = img.naturalHeight;
            const ratio = imageWidth / imageHeight;

            if (imageWidth > imageHeight) {
                thumbnail.classList.add("landscape");
            }
            if (ratio > 2) {
                thumbnail.classList.add("superwide");
            }
        }

        if (img.complete) {
            setOrientation();
        } else {
            img.addEventListener("load", setOrientation);
        }
    }

    function showNextBatch() {
        if (currentBatch >= totalBatches) return;

        const thumbnails = document.querySelectorAll(`.batch-${currentBatch}`);
        thumbnails.forEach((thumbnail) => {
            thumbnail.classList.remove("hidden-batch");
            checkImageOrientation(thumbnail);
        });

        currentBatch++;
    }

    let currentBatch = 1;

    // Check first batch immediately
    document.querySelectorAll(".batch-0").forEach(checkImageOrientation);

    // Throttle scroll handler
    let scrollTimeout;
    function handleScroll() {
        if (scrollTimeout) return;

        scrollTimeout = setTimeout(() => {
            const scrollPosition = window.innerHeight + window.scrollY;
            const pageBottom = document.documentElement.scrollHeight - 500;

            if (scrollPosition >= pageBottom) {
                showNextBatch();
            }
            scrollTimeout = null;
        }, 100);
    }

    window.addEventListener("scroll", handleScroll);
    setTimeout(handleScroll, 100);

    function setupLightboxNavigation() {
        let currentIndex = 0;
        let thumbnails = [];

        function createTransitionClone(lightbox) {
            const clone = lightbox.cloneNode(true);
            clone.classList.add("lightbox-clone");
            // Remove navigation and close buttons from clone
            clone.querySelectorAll("button").forEach((btn) => btn.remove());
            document.body.appendChild(clone);

            // Trigger fade out
            requestAnimationFrame(() => {
                clone.classList.add("fade-out");
                setTimeout(() => clone.remove(), 300);
            });
        }

        function updateThumbnails() {
            thumbnails = Array.from(document.querySelectorAll(".thumbnail"));
        }

        function handleLightbox(mutations) {
            const lightbox = document.querySelector(".app-lightbox.is-active");
            if (!lightbox) return;

            if (!lightbox.querySelector(".app-lightbox-nav")) {
                updateThumbnails();

                // Add navigation buttons
                const prev = document.createElement("button");
                prev.innerHTML = "<";
                prev.className = "app-lightbox-nav app-lightbox-prev";

                const next = document.createElement("button");
                next.innerHTML = ">";
                next.className = "app-lightbox-nav app-lightbox-next";

                lightbox.appendChild(prev);
                lightbox.appendChild(next);

                function navigate(direction) {
                    const nextIndex =
                        (currentIndex + direction + thumbnails.length) %
                        thumbnails.length;
                    currentIndex = nextIndex;

                    // Create clone before closing current lightbox
                    createTransitionClone(lightbox);

                    // Close current lightbox
                    lightbox.querySelector(".app-lightbox-close")?.click();

                    // Open new image after a short delay
                    setTimeout(() => thumbnails[nextIndex].click(), 50);
                }

                prev.onclick = () => navigate(-1);
                next.onclick = () => navigate(1);

                const keyHandler = (e) => {
                    if (!document.querySelector(".app-lightbox.is-active"))
                        return;
                    if (e.key === "ArrowLeft") navigate(-1);
                    if (e.key === "ArrowRight") navigate(1);
                };

                document.addEventListener("keydown", keyHandler);

                // Track current image
                const updateIndex = () => {
                    const lightboxImg = lightbox.querySelector("img");
                    if (lightboxImg) {
                        currentIndex = thumbnails.findIndex(
                            (thumb) =>
                                thumb.querySelector("img").src ===
                                lightboxImg.src,
                        );
                    }
                };
                updateIndex();

                // Cleanup when lightbox closes
                const cleanup = () => {
                    if (!document.querySelector(".app-lightbox.is-active")) {
                        document.removeEventListener("keydown", keyHandler);
                    }
                };

                new MutationObserver(cleanup).observe(document.body, {
                    childList: true,
                    subtree: true,
                });
            }
        }

        // Watch for lightbox opening
        const observer = new MutationObserver(handleLightbox);
        observer.observe(document.body, {
            childList: true,
            subtree: true,
        });

        // Update thumbnails list when new batch is loaded
        const originalShowNextBatch = window.showNextBatch;
        window.showNextBatch = function () {
            originalShowNextBatch();
        };
    }

    window.addEventListener("load", setupLightboxNavigation);
</script>

<>
    <Lightbox />
    <div class="imageGrid">
        {
            allImageData.map((imageData, index) => {
                const batchNumber = Math.floor(index / BATCH_SIZE);
                return (
                    <div
                        class:list={[
                            "thumbnail",
                            `batch-${batchNumber}`,
                            { "hidden-batch": batchNumber > 0 },
                        ]}
                        data-lightbox="true"
                        id={`${imageData.path}-thumbnail`}
                    >
                        <Image
                            src={imageData.image}
                            alt="thumbnail"
                            width={imageData.image.width}
                            height={imageData.image.height}
                            loading="lazy"
                        />
                    </div>
                );
            })
        }
    </div>
</>
