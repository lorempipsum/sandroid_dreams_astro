---
import { Image } from "astro:assets";
import Lightbox from "@julian_cataldo/astro-lightbox";
import styles from "./galleryImageGrid.module.scss";

const BATCH_SIZE = 20;
const { images } = Astro.props;

// Pre-sort all images and convert to array format for client-side use
const allImageData = Object.entries(images)
    .sort(
        ([filenameA], [filenameB]) =>
            getDateFromFilename(filenameB).getTime() -
            getDateFromFilename(filenameA).getTime(),
    )
    .map(([path, imageGetter]) => ({
        path,
        image: imageGetter(),
    }));

const totalBatches = Math.ceil(allImageData.length / BATCH_SIZE);

function getDateFromFilename(filename: string) {
    // Match YYYYMMDD-HH-MM-SS pattern
    const match = filename.match(/(\d{8})-(\d{2})-(\d{2})-(\d{2})/);
    if (!match) return new Date(0);

    const [_, date, hours, minutes, seconds] = match;
    const year = date.slice(0, 4);
    const month = date.slice(4, 6);
    const day = date.slice(6, 8);

    return new Date(`${year}-${month}-${day}T${hours}:${minutes}:${seconds}`);
}
---

<style>
    .imageGrid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        justify-items: center;
        padding-left: 2rem;
        padding-right: 2rem;
        gap: 1rem;
        margin: 0 auto;
    }

    .thumbnail {
        grid-column: span 1;
    }

    .landscape {
        grid-column: span 2;
    }

    .superwide {
        grid-column: 1 / -1;

        img {
            width: 95vw !important;
            height: auto;
        }
    }

    /* at lower than 600px, the grid will be 1 column */
    @media (max-width: 600px) {
        .imageGrid {
            grid-template-columns: 100%;
        }
        .landscape {
            grid-column: span 1;
            margin: 0 auto;
        }
    }

    .thumbnail {
        transition: all 0.354s ease-in-out;
        box-shadow:
            rgba(0, 0, 0, 0.25) 0px 0.0625em 0.0625em,
            rgba(0, 0, 0, 0.25) 0px 0.125em 0.5em,
            rgba(255, 255, 255, 0.1) 0px 0px 0px 1px inset;
        opacity: 100%;
        cursor: pointer;
        border: 4px solid white;

        img {
            width: 100%;
            height: 100%;

            object-fit: cover;
            margin: 0 auto;
            display: block;
        }
    }

    .thumbnail:hover {
        opacity: 50%;
        z-index: 200;
    }

    :global(.lightbox-arrow {
        position: fixed;
        top: 50%;
        transform: translateY(-50%);
        background: rgba(255, 255, 255, 0.8);
        border: none;
        padding: 1rem;
        font-size: 2rem;
        cursor: pointer;
        z-index: 100221;
        border-radius: 50%;
    })

    :global(.prev { left: 2rem; })
    :global(.next { right: 2rem; })

    :global(.lightbox-arrow:hover) {
        background: rgba(255, 255, 255, 1);
    }

    :global(.lightbox-clone) {
        position: fixed !important;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 100220;
        transition: opacity 0.3s ease-out !important;
    }

    :global(.fade-out) {
        opacity: 0 !important;
    }

    #loading-trigger {
        width: 100%;
        height: 10px;
        margin: 2rem 0;
    }

    .hidden-batch {
        display: none;
    }

    :global(.app-lightbox) {
        background: rgba(0, 0, 0, 0.9) !important;
    }

    :global(.app-lightbox img) {
        max-height: 90vh !important;
        width: 100%;
        object-fit: contain;
    }

    :global(.app-lightbox) {
        cursor: default !important;
    }

    :global(.app-lightbox-close) {
        color: white !important;
        font-size: 2rem !important;
    }

    :global(.app-lightbox-nav) {
        position: fixed;
        top: 50%;
        padding: 1rem;
        transform: translateY(-50%);
        background: rgba(255, 255, 255, 0.8);
        border: none;
        font-size: 3rem;
        cursor: pointer;
        z-index: 100222;
        color: black;
        transition: background-color 0.2s;
        height: 100%;
    }

    :global(.app-lightbox-nav:hover) {
        background: rgba(255, 255, 255, 1);
    }

    :global(.app-lightbox-prev) {
        left: 0;

        span {
            transform: translateX(100%);
        }
    }

    :global(.app-lightbox-next) {
        right: 0;
    }

    :global(.persistent-nav) {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        pointer-events: none;
        z-index: 100222;
        display: none;
    }

    :global(.persistent-nav.visible) {
        display: block;
    }

    :global(.persistent-nav button) {
        position: fixed;
        top: 50%;
        transform: translateY(-50%);
        background: rgba(255, 255, 255, 0.3);
        border: none;
        padding: 1rem;
        font-size: 2rem;
        cursor: pointer;
        pointer-events: auto;
        height: 5rem;
        transition: background-color 0.2s;
        -webkit-tap-highlight-color: transparent;
    }

    @media (hover: hover) {
        :global(.persistent-nav button:hover) {
            background: rgba(255, 255, 255, 1);
        }
    }

    :global(.persistent-nav button:active) {
        background: rgba(255, 255, 255, 0.9);
    }

    :global(.persistent-prev) {
        left: 1rem;
    }

    :global(.persistent-next) {
        right: 1rem;
    }
</style>

<script define:vars={{ allImageData, BATCH_SIZE, totalBatches, styles: { hiddenBatch: styles.hiddenBatch } }}>
    function checkImageOrientation(thumbnail) {
        const img = thumbnail.querySelector("img");

        function setOrientation() {
            const imageWidth = img.naturalWidth;
            const imageHeight = img.naturalHeight;
            const ratio = imageWidth / imageHeight;

            if (imageWidth > imageHeight) {
                thumbnail.classList.add("landscape");
            }
            if (ratio > 2) {
                thumbnail.classList.add("superwide");
            }
        }

        if (img.complete) {
            setOrientation();
        } else {
            img.addEventListener("load", setOrientation);
        }
    }

    function showNextBatch() {
        if (currentBatch >= totalBatches) return;

        const thumbnails = document.querySelectorAll(`.batch-${currentBatch}`);
        thumbnails.forEach((thumbnail) => {
            // Fix: Use the CSS module class name from styles object
            thumbnail.classList.remove(styles.hiddenBatch);
            checkImageOrientation(thumbnail);
        });

        currentBatch++;
        
        // If we still have more batches and we're near the bottom, load the next batch too
        if (currentBatch < totalBatches) {
            const scrollPosition = window.innerHeight + window.scrollY;
            const pageBottom = document.documentElement.scrollHeight - 300;
            
            if (scrollPosition >= pageBottom) {
                // Load next batch immediately if we're already near the bottom
                setTimeout(showNextBatch, 100);
            }
        }
    }

    let currentBatch = 1;

    // Check first batch immediately
    document.querySelectorAll(".batch-0").forEach(checkImageOrientation);
    
    // Pre-load the second batch after a short delay
    setTimeout(() => {
        if (currentBatch < totalBatches) {
            showNextBatch();
        }
    }, 500);

    // Enhanced scroll handler with debounce
    let scrollTimeout;
    function handleScroll() {
        if (scrollTimeout) return;

        scrollTimeout = setTimeout(() => {
            // Trigger batch loading when user scrolls to 70% of the current view
            const scrollPosition = window.innerHeight + window.scrollY;
            const pageBottom = document.documentElement.scrollHeight - (window.innerHeight * 0.3);

            if (scrollPosition >= pageBottom) {
                showNextBatch();
            }
            scrollTimeout = null;
        }, 100);
    }

    window.addEventListener("scroll", handleScroll);
    // Initial check in case the page isn't tall enough to scroll
    setTimeout(handleScroll, 300);

    function setupLightboxNavigation() {
        let currentIndex = 0;
        let thumbnails = [];
        let isTransitioning = false;

        function createTransitionClone(lightbox) {
            isTransitioning = true;

            const clone = lightbox.cloneNode(true);
            clone.classList.add("lightbox-clone");
            // Remove close button but keep nav elements
            clone.querySelector(".app-lightbox-close")?.remove();

            document.body.appendChild(clone);

            requestAnimationFrame(() => {
                clone.classList.add("fade-out");
                setTimeout(() => {
                    clone.remove();
                    isTransitioning = false;
                }, 300);
            });

            return clone;
        }

        const navContainer = document.createElement("div");
        navContainer.className = "persistent-nav";

        const prev = document.createElement("button");
        prev.innerHTML = "&#10094;"; // Left arrow entity
        prev.setAttribute("aria-label", "Previous image");
        prev.className = "persistent-prev";

        const next = document.createElement("button");
        next.innerHTML = "&#10095;"; // Right arrow entity
        next.setAttribute("aria-label", "Next image");
        next.className = "persistent-next";

        navContainer.appendChild(prev);
        navContainer.appendChild(next);
        document.body.appendChild(navContainer);

        function updateThumbnails() {
            // Fix: Use [data-lightbox="true"] to select all thumbnails regardless of CSS module class name
            thumbnails = Array.from(document.querySelectorAll('[data-lightbox="true"]'));
        }

        function navigate(direction) {
            if (isTransitioning || thumbnails.length === 0) return;
            
            const nextIndex =
                (currentIndex + direction + thumbnails.length) %
                thumbnails.length;
            currentIndex = nextIndex;

            const lightbox = document.querySelector(".app-lightbox.is-active");
            if (lightbox) {
                createTransitionClone(lightbox);
                lightbox.querySelector(".app-lightbox-close")?.click();
                
                // Add a small delay to ensure lightbox closes before opening again
                setTimeout(() => {
                    thumbnails[nextIndex].click();
                }, 50);
            }
        }

        prev.onclick = (e) => {
            e.stopPropagation();
            navigate(-1);
        };
        
        next.onclick = (e) => {
            e.stopPropagation();
            navigate(1);
        };

        // Watch for lightbox state
        const lightboxElement = document.querySelector(".app-lightbox");
        const observer = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
                if (
                    mutation.type === "attributes" &&
                    mutation.attributeName === "class"
                ) {
                    const lightbox = mutation.target;
                    if (lightbox.classList.contains("is-active")) {
                        updateThumbnails();
                        navContainer.classList.add("visible");
                        // Update current index
                        const lightboxImg = lightbox.querySelector("img");
                        if (lightboxImg) {
                            currentIndex = thumbnails.findIndex(
                                (thumb) =>
                                    thumb.querySelector("img").src ===
                                    lightboxImg.src,
                            );
                        }
                    } else {
                        navContainer.classList.remove("visible");
                        isTransitioning = false;
                    }
                }
            });
        });

        observer.observe(lightboxElement, {
            attributes: true,
            attributeFilter: ["class"],
        });

        // Handle keyboard navigation
        document.addEventListener("keydown", (e) => {
            if (!document.querySelector(".app-lightbox.is-active")) return;
            if (e.key === "ArrowLeft") navigate(-1);
            if (e.key === "ArrowRight") navigate(1);
        });
    }

    window.addEventListener("load", setupLightboxNavigation);
</script>

<>
    <Lightbox class="app-lightbox" />

    <div class={styles.imageGrid}>
        {
            allImageData.map((imageData, index) => {
                const batchNumber = Math.floor(index / BATCH_SIZE);
                return (
                    <div
                        class:list={[
                            styles.thumbnail,
                            `batch-${batchNumber}`,
                            { [styles.hiddenBatch]: batchNumber > 0 },
                        ]}
                        data-lightbox="true"
                        id={`${imageData.path}-thumbnail`}
                    >
                        <Image
                            src={imageData.image}
                            alt="thumbnail"
                            width={imageData.image.width}
                            height={imageData.image.height}
                            loading={batchNumber === 0 ? "eager" : "lazy"}
                        />
                    </div>
                );
            })
        }
    </div>
    
    {/* Add a loading indicator at the bottom */}
    <div id="loading-indicator" style="text-align: center; padding: 20px; display: none;">
        Loading more images...
    </div>
</>
