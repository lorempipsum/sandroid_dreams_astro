---
import FreeLayout from '../../layouts/FreeLayout.astro';
---

<FreeLayout title="Typewriter">
    <section class="container">
        <h2 class="title">Typewriter</h2>
        <p id="typewriter" class="type" aria-live="polite"></p>

        <div class="controls">
            <label>
                Text
                <input
                    id="textInput"
                    type="text"
                    value="Dream in code. Code your dreams."
                />
            </label>
            <label>
                Speed (ms)
                <input
                    id="speedInput"
                    type="number"
                    min="10"
                    max="500"
                    step="10"
                    value="60"
                />
            </label>
            <button id="restartBtn" type="button">Restart</button>
        </div>
    </section>

    <style>
        .container {
            max-width: 800px;
            margin: 0 auto;
            padding: 2rem 1rem 3rem;
        }
        .title {
            margin: 0 0 1rem;
            font-size: clamp(1.5rem, 2.5vw, 2rem);
            font-weight: 700;
            letter-spacing: 0.01em;
        }
        .type {
            position: relative;
            min-height: 2.25rem;
            font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas,
                'Liberation Mono', 'Courier New', monospace;
            font-size: 1.25rem;
            line-height: 1.8rem;
            white-space: pre-wrap;
            word-break: break-word;
            padding-right: 0.5rem;
        }
        .type::after {
            content: '';
            position: absolute;
            right: 0;
            width: 2px;
            height: 1.2em;
            background: currentColor;
            animation: blink 1s steps(2, start) infinite;
            transform: translateX(2px) translateY(0.2em);
        }
        @keyframes blink {
            50% {
                opacity: 0;
            }
        }

        .controls {
            display: grid;
            grid-template-columns: 1fr 140px auto;
            gap: 0.75rem;
            align-items: end;
            margin-top: 1rem;
        }
        label {
            display: grid;
            gap: 0.35rem;
            font-size: 0.9rem;
        }
        input[type='text'],
        input[type='number'] {
            padding: 0.5rem 0.6rem;
            border: 1px solid color-mix(in oklab, currentColor 20%, transparent);
            background: color-mix(in oklab, currentColor 3%, transparent);
            color: inherit;
            border-radius: 6px;
            outline: none;
        }
        input:focus {
            border-color: currentColor;
            box-shadow: 0 0 0 3px
                color-mix(in oklab, currentColor 20%, transparent);
        }
        button {
            height: 2.2rem;
            padding: 0 0.9rem;
            border-radius: 6px;
            border: 1px solid color-mix(in oklab, currentColor 25%, transparent);
            background: color-mix(in oklab, currentColor 10%, transparent);
            color: inherit;
            cursor: pointer;
        }
        button:hover {
            background: color-mix(in oklab, currentColor 16%, transparent);
        }

        @media (max-width: 640px) {
            .controls {
                grid-template-columns: 1fr 1fr;
            }
            button {
                grid-column: span 2;
            }
        }
    </style>

    <script is:inline>
        (function () {
            const el = document.getElementById('typewriter');
            const input = document.getElementById('textInput');
            const speed = document.getElementById('speedInput');
            const restart = document.getElementById('restartBtn');

            // Simple typewriter controller
            let frame = 0;
            let text = (input && input.value) || '';
            let ms = Math.max(10, Number((speed && speed.value) || 60));
            let rafId = 0;
            let last = 0;

            function cancel() {
                if (rafId) cancelAnimationFrame(rafId);
                rafId = 0;
            }

            function typeLoop(ts) {
                if (!el) return;
                if (!last) last = ts;
                const delta = ts - last;
                if (delta >= ms) {
                    last = ts;
                    frame = Math.min(frame + 1, text.length);
                    el.textContent = text.slice(0, frame);
                    if (frame === text.length) {
                        // small pause at end, then erase and restart
                        setTimeout(
                            () => {
                                eraseLoop();
                            },
                            Math.max(400, ms * 6)
                        );
                        return;
                    }
                }
                rafId = requestAnimationFrame(typeLoop);
            }

            function eraseLoop() {
                if (!el) return;
                const eraseSpeed = Math.max(10, Math.floor(ms * 0.6));
                function step(ts) {
                    const delta = ts - (step.last || ts);
                    step.last = ts;
                    if (delta >= eraseSpeed) {
                        frame = Math.max(0, frame - 1);
                        el.textContent = text.slice(0, frame);
                        if (frame === 0) {
                            // restart typing
                            last = 0;
                            rafId = requestAnimationFrame(typeLoop);
                            return;
                        }
                    }
                    rafId = requestAnimationFrame(step);
                }
                rafId = requestAnimationFrame(step);
            }

            function restartAll() {
                cancel();
                last = 0;
                frame = 0;
                text = (input && input.value) || '';
                ms = Math.max(10, Number((speed && speed.value) || 60));
                if (el) el.textContent = '';
                rafId = requestAnimationFrame(typeLoop);
            }

            input && input.addEventListener('change', restartAll);
            input &&
                input.addEventListener('input', () => {
                    text = input.value;
                });
            speed && speed.addEventListener('change', restartAll);
            restart && restart.addEventListener('click', restartAll);

            // kick off after initial paint
            requestAnimationFrame(typeLoop);

            // defensive cleanup
            window.addEventListener('beforeunload', cancel);
        })();
    </script>
</FreeLayout>
